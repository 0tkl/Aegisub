name: Meson CI

on:
  push:
    branches:
      - master
      - feature
      - cibuilds
    paths-ignore: 
      - ".github/workflows/distro.yml"
  pull_request:
    branches:
      - master
      - feature
    paths-ignore: 
      - ".github/workflows/distro.yml"
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows MSVC Release
            os: windows-latest
            msvc: true
            buildtype: release
            args: >-
              -Ddefault_library=static 
              --force-fallback-for=zlib,harfbuzz,freetype2,fribidi,libpng 
              -Dfreetype2:harfbuzz=disabled 
              -Dharfbuzz:freetype=disabled 
              -Dharfbuzz:cairo=disabled 
              -Dharfbuzz:glib=disabled 
              -Dharfbuzz:gobject=disabled
              -Dharfbuzz:tests=disabled
              -Dharfbuzz:docs=disabled
              -Dharfbuzz:icu=disabled
              -Dfribidi:tests=false
              -Dfribidi:docs=false
              -Dlibass:fontconfig=disabled
              -Dffmpeg:libdav1d=enabled
              -Davisynth=enabled
              -Dbestsource=enabled
              -Dvapoursynth=enabled

          - name: Windows MSVC Release (wx master)
            os: windows-latest
            msvc: true
            buildtype: release
            args: >-
              -Ddefault_library=static 
              --force-fallback-for=zlib,harfbuzz,freetype2,fribidi,libpng 
              -Dfreetype2:harfbuzz=disabled 
              -Dharfbuzz:freetype=disabled 
              -Dharfbuzz:cairo=disabled 
              -Dharfbuzz:glib=disabled 
              -Dharfbuzz:gobject=disabled
              -Dharfbuzz:tests=disabled
              -Dharfbuzz:docs=disabled
              -Dharfbuzz:icu=disabled
              -Dfribidi:tests=false
              -Dfribidi:docs=false
              -Dlibass:fontconfig=disabled
              -Dffmpeg:libdav1d=enabled
              -Davisynth=enabled
              -Dbestsource=enabled
              -Dvapoursynth=enabled
              -Dwx_version='3.3.0'
          #- {
          #  name: Windows MinGW,
          #  os: windows-latest,
          #  msvc: false
          #}
          - {
            name: Ubuntu Debug,
            os: ubuntu-22.04,
            buildtype: debugoptimized,
            args: '-Dffms2=disabled'
          }
          - {
            name: Ubuntu Release,
            os: ubuntu-22.04,
            buildtype: release,
            args: '-Dffms2=disabled'
          }
          - name: Ubuntu AppImage
            os: ubuntu-22.04
            buildtype: release
            appimage: true
            # distro ffms is currently broken
            args: >-
              --prefix=/usr
              -Dbuild_appimage=true
              -Ddefault_library=static
              --force-fallback-for=ffms2
              -Dffmpeg:libdav1d=enabled
              -Davisynth=enabled
              -Dbestsource=enabled
              -Dvapoursynth=enabled

          - name: macOS 13 Release
            os: macos-13
            buildtype: release
            prefix: "/usr/local/Cellar"
            args: >-
              -Ddefault_library=static
              -Dbuild_osx_bundle=true
              -Dbestsource=enabled
              -Dvapoursynth=enabled
              --force-fallback-for=ffms2

          - name: macOS Release
            os: macos-14
            buildtype: release
            prefix: "/opt/homebrew/Cellar"
            args: >-
              -Ddefault_library=static
              -Dbuild_osx_bundle=true
              -Dbestsource=enabled
              -Dvapoursynth=enabled
              --force-fallback-for=ffms2

          - name: macOS 13 Release (wx master)
            os: macos-13
            buildtype: release
            prefix: "/usr/local/Cellar"
            args: >-
              -Ddefault_library=static
              -Dbuild_osx_bundle=true
              -Dbestsource=enabled
              -Dvapoursynth=enabled
              --force-fallback-for=ffms2
              -Dwx_version='3.3.0'

          - name: macOS Release (wx master)
            os: macos-14
            buildtype: release
            prefix: "/opt/homebrew/Cellar"
            args: >-
              -Ddefault_library=static
              -Dbuild_osx_bundle=true
              -Dbestsource=enabled
              -Dvapoursynth=enabled
              --force-fallback-for=ffms2
              -Dwx_version='3.3.0'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # copied from gha workflow in meson repo
      # github actions overwrites brew's python. Force it to reassert itself, by running in a separate step.
      - name: Unbreak Python in GitHub Actions (MacOS)
        if: startsWith(matrix.config.os, 'macos')
        run: |
          python -m pip install --upgrade pip setuptools
          pip install meson
          brew update
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          sudo rm -rf /Library/Frameworks/Python.framework/
          brew install --force python3 && brew unlink python3 && brew unlink python3 && brew link --overwrite python3

      - name: Setup MSVC
        if: matrix.config.os == 'windows-latest' && matrix.config.msvc == true
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco install ninja innosetup nasm

          $moonscripturl = "https://github.com/leafo/moonscript/releases/download/win32-v0.5.0/moonscript-187bac54ee5a7450013e9c38e005a0e671b76f45.zip"
          mkdir moonscript
          Invoke-WebRequest -Uri $moonscripturl -OutFile ".\moonscript\moonscript.zip"
          pushd moonscript
          7z e moonscript.zip
          Get-Location | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          popd

          $gettexturl = "https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.21-v1.16/gettext0.21-iconv1.16-static-64.zip"
          Invoke-WebRequest -Uri $gettexturl -OutFile ".\gettext.zip"
          Expand-Archive ".\gettext.zip" -DestinationPath gettext
          pushd gettext/bin
          Get-Location | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          popd

      - name: Install dependencies (MacOS)
        if: startsWith(matrix.config.os, 'macos-')
        run: |
          brew install luarocks
          sudo luarocks install moonscript --dev
          brew install ninja nasm boost libass
          brew install --HEAD ffms2
          brew install zlib fftw hunspell
          brew install pulseaudio  # NO OpenAL in github CI

      - name: Setup Third-Party wxWidgets 3.2 (Ubuntu 22.04)
        if: matrix.config.os == 'ubuntu-22.04'
        run: |
          sudo apt-key adv --fetch-keys https://repos.codelite.org/CodeLite.asc
          sudo apt-add-repository 'deb https://repos.codelite.org/wx3.2/ubuntu/ jammy universe'

      - name: Install dependencies (Linux)
        if: startsWith(matrix.config.os, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends ninja-build libx11-dev \
          libfreetype6-dev pkg-config libfontconfig1-dev libnotify-dev \
          libass-dev libasound2-dev intltool libboost-all-dev libhunspell-dev \
          libuchardet-dev libpulse-dev libopenal-dev libxxhash-dev nasm
          sudo apt-get install --no-install-recommends \
          libwxbase3.2-0-unofficial libwxbase3.2unofficial-dev \
          libwxgtk3.2-0-unofficial libwxgtk3.2unofficial-dev \
          wx3.2-headers wx-common wx3.2-i18n

      - name: set up MacOS env
        if: startsWith( matrix.config.os, 'macos-' )
        run: |
          # Changes are only available in the following steps, not the current one
          echo 'CPPFLAGS=-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I${{matrix.config.prefix}}/gettext/0.22.5/include' >> $GITHUB_ENV
          echo 'LDFLAGS=-L${{matrix.config.prefix}}/gettext/0.22.5/lib' >> $GITHUB_ENV
          echo 'PKG_CONFIG_PATH=${{matrix.config.prefix}}/icu4c/74.2/lib/pkgconfig' >> $GITHUB_ENV
          echo 'ACLOCAL_PATH=${{matrix.config.prefix}}/gettext/0.22.5/share/aclocal'  >> $GITHUB_ENV
          # Prepend to $PATH
          echo "${{matrix.config.prefix}}/icu4c/74.2/bin"   >> $GITHUB_PATH
          echo "${{matrix.config.prefix}}/icu4c/74.2/sbin"  >> $GITHUB_PATH
          echo "${{matrix.config.prefix}}/gettext/0.22.5/bin" >> $GITHUB_PATH

      - name: Configure
        run: |
          meson setup build ${{ matrix.config.args }} -Dbuildtype=${{ matrix.config.buildtype }}
          meson configure build

      - name: Build
        run: meson compile -C build
      
      - name: Run test
        run: meson test -C build --verbose "gtest main"

      # Windows artifacts
      - name: Generate Windows installer
        if: matrix.config.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          meson compile win-installer -C build

      - name: Generate Windows portable installer
        if: matrix.config.os == 'windows-latest'
        run: cd build && ninja win-portable

      - name: Upload artifacts - win_installer
        uses: actions/upload-artifact@v4
        if: matrix.config.os == 'windows-latest'
        with:
          name: ${{ matrix.config.name }} - installer
          path: build/Aegisub-*.exe
          if-no-files-found: error
      
      - name: Upload artifacts - portable.zip
        uses: actions/upload-artifact@v4
        if: matrix.config.os == 'windows-latest'
        with:
          name: ${{ matrix.config.name }} - portable
          path: build/aegisub-portable-64.zip
      
      # macOS artifacts
      - name: Generate macOS installer
        if: startsWith(matrix.config.os, 'macos-')
        run: |
          meson compile osx-bundle -C build
          meson compile osx-build-dmg -C build

      - name: Upload artifacts - macOS dmg
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.config.os, 'macos-')
        with:
          name: ${{ matrix.config.name }} - installer
          path: build/Aegisub-*.dmg
          if-no-files-found: error

      # Linux artifacts (AppImage)
      - name: Generate AppImage
        if: matrix.config.appimage
        run: |
          mkdir -p appimage/appdir
          meson install -C build --destdir=../appimage/appdir

          cd appimage
          sudo apt-get install libfuse2
          curl -L "https://github.com/linuxdeploy/linuxdeploy/releases/download/2.0.0-alpha-1-20241106/linuxdeploy-x86_64.AppImage" -o linuxdeploy
          curl -L "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage" -o appimagetool
          chmod +x linuxdeploy appimagetool

          ./linuxdeploy --appdir appdir --desktop-file=appdir/aegisub.desktop
          ./appimagetool appdir

      - name: Upload artifacts - Linux AppImage
        uses: actions/upload-artifact@v4
        if: matrix.config.appimage
        with:
          name: ${{ matrix.config.name }}
          path: appimage/*.AppImage
          if-no-files-found: error
